## ------------- commands ------------- ##


mongo --version

mongo "mongodb+srv://sandbox.HOST.mongodb.net/sample_airbnb" --username some-username   # connect to your server through mongo shell client



mongodump --uri "<Atlas Cluster URI>"	# Exports data in BSON

Example: mongodump --uri "mongodb+srv://some-username:some-password@sandbox.HOST.mongodb.net/sample_airbnb"


mongoexport --uri "<Atlas Cluster URI>"
            --collection=<colleciton name>
            --out=<filename>.json	# Exports data in JSON


mongorestore --uri "<Atlas Cluster URI>"
             --drop dump	# Imports data in BSON dump

mongoimport --uri "<Atlas Cluster URI>"
            --drop=<filename>.json	#Imports data in JSON







## ------------- query ------------- ##


show dbs
use <db name>
show collections

db.createCollection("employees")       # create a new collection in the db

db.<collection>.find( {"field":"value", "field":"value", ...} )
                                                               .count()
                                                               .pretty()

db.<collection>.findOne()       # finds one random document

db.<collection>.insert({})      # inserts just one document

db.<collection>.insert([{},{},{},...])      # inserts many documents

db.<collection>.insert([{},{},{},...], {"ordered": false})      # inserts many documents unorderly so the insert errors won't stop the insert operations

db.<collection>.updateOne()       # wether updates the single found result, or updates the first found in a result set
db.<collection>.updateMany()      # updates all the result set

db.<collection>.updateMany({ "city": "HUDSON" }, { "$inc": { "pop": 10 } })       # first part is the search criteria, second part is for update command

$inc, $set, $push      # increment, set, pushing a new document


db.grades.updateOne({"student_id": 250, "class_id": 339 }, $push: { "scores": {"type": "extra credit", "score": 100 }}})   
--> # "scores" is an array of objects in the found document from grades, here we are adding another object(as a document) to "scores" array

db.<collection>.deleteOne() 
db.<collection>.deleteMany()

db.<collection>.drop()      # deletes the whole collection from database

db.<collection>.find({ "field1": {"$lt":"value1"}, "field2": {"$gt":"value2"}, ... })       # $eq, $ne, $lt, $lte, $gt, $gte (comparison operators)

db.<collection>.find({ "<operator>": [{"f":"v"}, {"f":"v"}, ...] })       # $and, $or, $nor, $not (logical operator)

e.g. --> db.routes.find({ $and: [ {$or:[{'src_airport':'KZN'}, {'dst_airport':'KZN'}]}, {$or:[{'airplane':'CR2'}, {'airplane':'A81'}]} ] })

db.<collection>.find({ "$expr": { "$eq": [ "$field1", "$field2"] }})       # $expr expression operator


db.<collection>.find({  $expr":{ 
 			$and:[ 
				{ "$gt": [ "$field1", 1200 ]},
                         	{ "$eq": [ "$field2", "$field3" ]}
                        ]
		 }
	      }).count()

db.<collection>.find({"array_field": "value"})       # finds all documents which "array_field" contain "value" as one of their values 

db.<collection>.find({"array_field": ["value"]})     # finds all documents which "array_field" contain "value" as their exact value

db.<collection>.find({"array_field": ["v1","v2","v3"]})     # finds all documents which "array_field" contain "v1", "v2", "v3" as their exact values in exact order

db.<collection>.find({"array_field": {$all: ["v1","v2","v3"]} })     # finds all documents which "array_field" contain "v1", "v2", "v3" as part of their values in whatever order


db.<collection>.find({"array_field": {$size:20, $all: ["v1","v2","v3"]} })  
# finds all documents which "array_field" contain exactly 20 items and have "v1", "v2", "v3" as part of their values in whatever order

db.<collection>.find( { {<query>},{<query>} }, {<projection>} )       # project specified fields

e.g. --> db.listingsAndReviews.find({"amenities":"Wifi"}, {"price":1, "address":1, "_id":0})       # result set only contains "price" and "address" fields

db.<collection>.find( {<query>},  { "array_field":{ $elemMatch:{ "sub_doc_field":"value" } }  } )
# find documents based on query and projects only array_field.sub_doc_fields contain specified value

db.<collection>.find( { "array_field":{ $elemMatch:{ "sub_doc_field":"value" } }  } )   # this sub_doc_field is the basis of search

db.<collection>.find({ "field.sub_doc_field1.sub_doc_field2.sub_doc_field3": "value" })       # using dot(.) notation we can address sub document fields to any level


e.g.  --> db.companies.find({ "relationships.0.person.first_name": "Mark", "relationships.0.title": { "$regex": "CEO" } },{ "name": 1 })
# relationships.0 --> 0 refers to the first element in the list of relationships' items
# $regex is regular expresion operator matching through values

e.g. --> db.companies.find({ "relationships":{ "$elemMatch": { "is_past": true, "person.first_name": "Mark" } } },{ "name": 1 }).count()


db.<collection>.aggregate([ {'1st stage of pipeline'}, {'2nd stage'}, {'3rd stage'}, ... ])       # aggregate command shapes data the way we want

e.g. --> db.listingsAndReviews.aggregate([
                                  { "$match": { "amenities": "Wifi" } },
                                  { "$project": { "price": 1, "address": 1, "_id": 0 }}
			       ]).pretty()

e.g. --> db.listingsAndReviews.aggregate([
                                  { "$match":   { "amenities": "Wifi" } },
                                  { "$project": { "address": 1, "_id": 0 }},
				  { "$group":   { "_id": "$address.country", "count": { "$sum": 1 } } }
			       ]).pretty()

db.<collection>.find({ '...' }).sort({ "f1":1, "f2":-1, ... }).limit(n)       # sort and limit are cursor methods, like pretty and count. 1 means ascending, -1 is descending

db.<collection>.createIndex({ "field":1 })       # create an index on specified field in ascending order

db.<collection>.createIndex({ "f1":1, "f2":-1, ... })       # create a compound index

db.<collection>.updateOne({'query criteria'}, {'update criteria'}, {"upsert":true})       # default value of upsert is false. If it set to true in an update statement, then either 

e.g. --> db.iot.updateOne({ "sensor": r.sensor, "date": r.date, valcount": { "$lt": 48 } },
                          { $push: { "readings": { "v": r.value, "t": r.time } }, $inc: { "valcount": 1, "total": r.value } },
                          { "upsert": true })




